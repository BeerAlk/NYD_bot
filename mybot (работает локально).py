import logging
import json
import os
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ChatJoinRequest
from aiocron import crontab

API_TOKEN = '7415146600:AAFvHQt3Kkr0_XIFYM2mPfea-ZqRG8NulZc'
SUBSCRIBERS_FILE = 'subscribers.json'
main_channel_url = "https://t.me/not_yet_design"
main_channel_id = -1001844574074
closed_channel_link = "https://t.me/+Ek0Zwec_-ghhMTcy"
closed_group_chat = -1001864564323
ADMIN_ID = 551926727
ADMIN_USERNAME = "@Skat2190"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –£–¥–∞–ª–µ–Ω–∏–µ Webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def delete_webhook():
    async with aiohttp.ClientSession() as session:
        url = f'https://api.telegram.org/bot{API_TOKEN}/deleteWebhook'
        async with session.get(url) as response:
            return await response.json()
asyncio.run(delete_webhook())
logging.info("Webhook —É–¥–∞–ª–µ–Ω.")

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
def load_subscribers():
    if not os.path.exists(SUBSCRIBERS_FILE):
        return []
    try:
        with open(SUBSCRIBERS_FILE, "r", encoding="utf-8") as file:
            return json.load(file)  # subscribers ‚Äì —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª (ID)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []

def save_subscribers(subscribers):
    try:
        with open(SUBSCRIBERS_FILE, "w", encoding="utf-8") as file:
            json.dump(subscribers, file, ensure_ascii=False, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")

async def add_user_to_subscribers(user_id):
    subscribers = load_subscribers()
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_subscribers(subscribers)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")

async def check_subscription(user_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
        member = await bot.get_chat_member(main_channel_id, user_id)
        if member.status not in ["member", "administrator", "creator"]:
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞.
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º, —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        bot_member = await bot.get_chat_member(user_id, user_id)
        if bot_member.status != "member":
            return False
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False

def is_admin(message: types.Message):
    return message.from_user.id == ADMIN_ID

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@dp.chat_join_request(F.chat.id == closed_group_chat)
async def handle_join_request(request: ChatJoinRequest):
    user_id = request.from_user.id
    username = request.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    if await check_subscription(user_id):
        await bot.approve_chat_join_request(closed_group_chat, user_id)
        logging.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞: {username} ({user_id})")
        await add_user_to_subscribers(user_id)
    else:
        await bot.decline_chat_join_request(closed_group_chat, user_id)
        logging.info(f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {username} ({user_id})")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", url=f"https://t.me/{ADMIN_USERNAME.lstrip('@')}")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ Not Yet Design!\n\n"
        f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {main_channel_url},\n"
        f"–∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º lambda-—Ñ–∏–ª—å—Ç—Ä)
@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription_callback(callback_query: types.CallbackQuery):
    logging.info(f"Callback –ø–æ–ª—É—á–µ–Ω: {callback_query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    user_id = callback_query.from_user.id
    if await check_subscription(user_id):
        await add_user_to_subscribers(user_id)
        await callback_query.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
        await callback_query.message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É: " +
            closed_channel_link
        )
    else:
        await callback_query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /post –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ
@dp.message(Command("post"))
async def post_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        sent_message = None
        if message.photo and message.video:
            sent_message = await bot.send_photo(
                main_channel_id,
                message.photo[-1].file_id,
                caption=message.caption
            )
            await bot.send_video(
                main_channel_id,
                message.video.file_id,
                caption="–í–∏–¥–µ–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:"
            )
        elif message.photo:
            sent_message = await bot.send_photo(
                main_channel_id,
                message.photo[-1].file_id,
                caption=message.caption
            )
        elif message.video:
            sent_message = await bot.send_video(
                main_channel_id,
                message.video.file_id,
                caption=message.caption
            )
        else:
            args = message.text.split(maxsplit=1)
            if len(args) < 2:
                await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.")
                return
            text = args[1]
            sent_message = await bot.send_message(main_channel_id, text)
        if sent_message:
            post_url = f"https://t.me/{main_channel_url.split('/')[-1]}/{sent_message.message_id}"
            subscribers = load_subscribers()
            for user_id in subscribers.copy():
                try:
                    await bot.send_message(user_id, f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ: {post_url}")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    subscribers.remove(user_id)
                    save_subscribers(subscribers)
            await message.reply("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ ‚Äì —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö media_group_id
processed_media_groups = {}

@dp.channel_post()
async def channel_post_handler(message: types.Message):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    if message.media_group_id:
        # –ï—Å–ª–∏ —ç—Ç–æ—Ç media_group_id —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≤—ã—Ö–æ–¥–∏–º
        if message.media_group_id in processed_media_groups:
            logging.info(f"Media group {message.media_group_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}")
            return
        else:
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç media_group_id –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            processed_media_groups[message.media_group_id] = True

    logging.info("channel_post_handler –≤—ã–∑–≤–∞–Ω")
    try:
        post_url = f"https://t.me/{main_channel_url.split('/')[-1]}/{message.message_id}"
        logging.info(f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ: {post_url}")
        subscribers = load_subscribers()
        for user_id in subscribers.copy():
            try:
                await bot.send_message(user_id, f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ: {post_url}")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                subscribers.remove(user_id)
                save_subscribers(subscribers)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /check_users ‚Äì —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—É–¥–∞–ª—è–µ—Ç –∏–∑ –±–∞–∑—ã —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)
@dp.message(Command("check_users"))
async def check_users_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    subscribers = load_subscribers()
    removed_users = []
    if not subscribers:
        await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç. –ù–∏–∫–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å.")
        return
    for user_id in subscribers.copy():
        logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        is_subscribed = await check_subscription(user_id)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: {is_subscribed}")
        try:
            await bot.send_chat_action(user_id, "typing")
            is_active = True
        except Exception as e:
            is_active = False
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–æ—Ç–æ–º: {e}")
        if not is_subscribed or not is_active:
            logging.info(f"–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –ø–æ–¥–ø–∏—Å–∫–∞={is_subscribed}, –∞–∫—Ç–∏–≤–µ–Ω={is_active}")
            subscribers.remove(user_id)
            removed_users.append(user_id)
            save_subscribers(subscribers)
            try:
                await bot.ban_chat_member(closed_group_chat, user_id)
                await bot.unban_chat_member(closed_group_chat, user_id)
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º.")
    await message.reply(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(removed_users)}")

# –ö–æ–º–∞–Ω–¥–∞ /clean_group ‚Äì —á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –≥—Ä—É–ø–ø–µ
@dp.message(Command("clean_group"))
async def clean_group_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    chat_members_count = await bot.get_chat_member_count(closed_group_chat)
    logging.info(f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {chat_members_count}")
    chat_admins = await bot.get_chat_administrators(closed_group_chat)
    admins = {admin.user.id for admin in chat_admins}
    logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã: {admins}")
    subscribers = load_subscribers()
    removed_users = []
    for user_id in subscribers.copy():
        if user_id in admins:
            continue
        try:
            member = await bot.get_chat_member(closed_group_chat, user_id)
            if member.status in ["left", "kicked"]:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É.")
                removed_users.append(user_id)
                subscribers.remove(user_id)
        except Exception as e:
            if "PARTICIPANT_ID_INVALID" in str(e):
                logging.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {user_id}, —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã.")
                removed_users.append(user_id)
                subscribers.remove(user_id)
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id}: {e}")
    save_subscribers(subscribers)
    await message.reply(f"–ß–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–∑ –±–∞–∑—ã —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(removed_users)}")

# –ö–æ–º–∞–Ω–¥–∞ /list_users ‚Äì –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –≤–∏–¥–∏—Ç (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
@dp.message(Command("list_users"))
async def list_users_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        subscribers = load_subscribers()
        if subscribers:
            await message.reply("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:\n" + "\n".join(str(uid) for uid in subscribers))
        else:
            await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

# –§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –æ–±—ä–µ–∫—Ç–∞ message (–¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏)
async def check_users_command_manual():
    subscribers = load_subscribers()
    removed_users = []
    if not subscribers:
        logging.info("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç. –ù–∏–∫–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å.")
        return 0
    for user_id in subscribers.copy():
        is_subscribed = await check_subscription(user_id)
        try:
            await bot.send_chat_action(user_id, "typing")
            is_active = True
        except Exception as e:
            is_active = False
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–æ—Ç–æ–º: {e}")
        if not is_subscribed or not is_active:
            subscribers.remove(user_id)
            removed_users.append(user_id)
            save_subscribers(subscribers)
            try:
                await bot.ban_chat_member(closed_group_chat, user_id)
                await bot.unban_chat_member(closed_group_chat, user_id)
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(removed_users)}")
    return len(removed_users)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤
async def scheduled_check():
    removed_count = await check_users_command_manual()
    logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {removed_count}")

async def start_cron():
    loop = asyncio.get_running_loop()
    crontab("0 */4 * * *", func=scheduled_check, loop=loop)
    logging.info("Cron-–∑–∞–¥–∞—á–∞ scheduled_check –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    asyncio.create_task(start_cron())
    try:
        await dp.start_polling(bot, allowed_updates=["message", "channel_post", "callback_query"])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
